# services:
#   postgres:
#     container_name: postgres
#     build:
#       context: ./requirements/postgres/
#       dockerfile: Dockerfile
#       args:
#         DB_NAME: ${DB_NAME}
#         DB_USER: ${DB_USER}
#         DB_PASS: ${DB_PASS}
#         DB_HOST: ${DB_HOST}
#     env_file:
#       - .env
#     ports:
#       - "5432:5432"
#     networks:
#       - nwtranscendence
#     # volumes:
#     #   - db-volume:/var/lib/postgresql/data
#     restart: always

#   backend:
#     container_name: backend
#     build:
#       context: ./requirements/backend/
#       dockerfile: Dockerfile
#       args:
#           API_CLIENT_ID: ${API_CLIENT_ID}
#           API_CLIENT_SECRET : ${API_CLIENT_SECRET}
#           API_REDIRECT_URI: ${API_REDIRECT_URI}
#           DB_HOST: ${DB_HOST}
#           CERTIFICATE_PATH: ${CERTIFICATE_PATH}
#           VALUE: ${VALUE}
#           GUNICORN_WD_BACKEND: ${GUNICORN_WD_BACKEND}
#           PYTHONPATH: ${PYTHONPATHBACKEND}
#           EMAIL_HOST_USER: ${EMAIL_HOST_USER}
#           EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
#     env_file:
#       - .env
#     ports:
#       - "8008:8008"
#     networks:
#       - nwtranscendence
#     # volumes:
#     #   - backend-volume:/app
#     depends_on:
#       - postgres
#     restart: always

#   backendmicro:
#     container_name: backendmicro
#     build:
#       context: ./requirements/backendmicro/
#       dockerfile: Dockerfile
#       args:
#         CERTIFICATE_PATH: ${CERTIFICATE_PATH}
#         VALUE: ${VALUE}
#         GUNICORN_WD_BACKEND_MICRO: ${GUNICORN_WD_BACKEND_MICRO}
#         PYTHONPATHBACKENDMICRO: ${PYTHONPATHBACKENDMICRO}
#     env_file:
#       - .env
#     ports:
#       - "8009:8009"
#     networks:
#       - nwtranscendence
#     # volumes:
#     #   - backendmicro-volume:/app
#     depends_on:
#       - postgres
#     restart: always

#   frontend:
#       container_name: frontend
#       build:
#         context: ./requirements/frontend/
#         dockerfile: Dockerfile
#         args:
#           CERTIFICATE_PATH: ${CERTIFICATE_PATH}
#           VALUE: ${VALUE}
#       env_file:
#         - .env
#       ports:
#         - "443:443"
#       networks:
#         - nwtranscendence
#       depends_on:
#         - backend
#       # volumes:
#       #   - frontend-volume:/var/www/html
#       restart: always 

# # volumes:
# #   db-volume:
# #     driver_opts:
# #       o: bind
# #       type: none
# #       device: /home/vatche/Documents/dbforft

# #   backend-volume:
# #     driver_opts:
# #       o: bind
# #       type: none
# #       device: /home/vatche/Desktop/Oct14/ft_transcendence/docker/requirements/backend/srcs/backend/backend/
    
  
# #   backendmicro-volume:
# #     driver_opts:
# #       o: bind
# #       type: none
# #       device: /home/vatche/Desktop/Oct14/ft_transcendence/docker/requirements/backendmicro/srcs/backendmicro/backendmicro

# #   frontend-volume:
# #     driver_opts:
# #       o: bind
# #       type: none
# #       device: /home/vatche/Desktop/Oct14/ft_transcendence/docker/requirements/frontend/srcs/frontend/html


# networks:
#     nwtranscendence:
#         driver: bridge

version: '3.8'

services:
  postgres:
    container_name: postgres
    build:
      context: ./requirements/postgres/
      dockerfile: Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_NAME2: ${DB_NAME2}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_HOST: ${DB_HOST}
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - nwtranscendence
    # volumes:
    #   - db-volume:/var/lib/postgresql/data
    restart: always

  backend:
    container_name: backend
    build:
      context: ./requirements/backend/
      dockerfile: Dockerfile
      args:
          API_CLIENT_ID: ${API_CLIENT_ID}
          API_CLIENT_SECRET: ${API_CLIENT_SECRET}
          API_REDIRECT_URI: ${API_REDIRECT_URI}
          DB_HOST: postgres
          CERTIFICATE_PATH: ${CERTIFICATE_PATH}
          VALUE: ${VALUE}
          GUNICORN_WD_BACKEND: ${GUNICORN_WD_BACKEND}
          PYTHONPATH: ${PYTHONPATHBACKEND}
          EMAIL_HOST_USER: ${EMAIL_HOST_USER}
          EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    env_file:
      - .env
    ports:
      - "8008:8008"
    networks:
      - nwtranscendence
    # volumes:
    #   - backend-volume:/app
    depends_on:
      - postgres
    restart: always

  backendmicro:
    container_name: backendmicro
    build:
      context: ./requirements/backendmicro/
      dockerfile: Dockerfile
      args:
        CERTIFICATE_PATH: ${CERTIFICATE_PATH}
        VALUE: ${VALUE}
        GUNICORN_WD_BACKEND_MICRO: ${GUNICORN_WD_BACKEND_MICRO}
        API_CLIENT_ID: ${API_CLIENT_ID}
        API_CLIENT_SECRET: ${API_CLIENT_SECRET}
        API_REDIRECT_URI: ${API_REDIRECT_URI}
        DB_HOST: postgres
     
        GUNICORN_WD_BACKEND: ${GUNICORN_WD_BACKEND}
        PYTHONPATH: ${PYTHONPATHBACKENDMICRO}
        EMAIL_HOST_USER: ${EMAIL_HOST_USER}
        EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
    env_file:
      - .env
    ports:
      - "8009:8009"
    networks:
      - nwtranscendence
    # volumes:
    #   - backendmicro-volume:/app
    depends_on:
      - postgres
    restart: always

  frontend:
    container_name: frontend
    build:
      context: ./requirements/frontend/
      dockerfile: Dockerfile
      args:
        CERTIFICATE_PATH: ${CERTIFICATE_PATH}
        VALUE: ${VALUE}
    env_file:
      - .env
    ports:
      - "443:443"
    networks:
      - nwtranscendence
    # volumes:
    #   - frontend-volume:/var/www/html
    depends_on:
      - backend
      - backendmicro
    restart: always

# ---------------------- MONITORING ---------------------- #

  prometheus:
    container_name: prom
    build:
      context: ./requirements/prometheus
      dockerfile: Dockerfile
    command:
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=1h'
    ports:
      - '9090:9090'
    
  grafana:
    container_name: grafana
    build:
      context: ./requirements/grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin1234

  node-exporter:
    container_name: node-exporter
    image: 'quay.io/prometheus/node-exporter:v1.8.2'
    command:
      - '--path.rootfs=/host'
    ports:
      - '9100:9100'

# ---------------------- ELK ---------------------- #

  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        echo "Creating certs";
        echo -ne \
        "instances:\n"\
        "  - name: es01\n"\
        "    dns:\n"\
        "      - es01\n"\
        "      - localhost\n"\
        "    ip:\n"\
        "      - 127.0.0.1\n"\
        "  - name: kibana\n"\
        "    dns:\n"\
        "      - kibana\n"\
        "      - localhost\n"\
        "    ip:\n"\
        "      - 127.0.0.1\n"\
        "  - name: logstash\n"\
        "    dns:\n"\
        "      - logstash\n"\
        "      - localhost\n"\
        "    ip:\n"\
        "      - 127.0.0.1\n"\
        "  - name: filebeat\n"\
        "    dns:\n"\
        "      - filebeat\n"\
        "      - localhost\n"\
        "    ip:\n"\
        "      - 127.0.0.1\n"\
        > config/certs/instances.yml;
        bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
        unzip config/certs/certs.zip -d config/certs;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u elastic:${ELASTIC_PASSWORD} -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elknet

  es01:
    container_name: es01
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - ./setup_ilm.sh:/usr/share/elasticsearch/config/setup_ilm.sh
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # --------------  This script needs to be run in a makefile!!! ---------------- !!!!
    # command: >
    #   /bin/bash -c "/usr/share/elasticsearch/config/setup_ilm.sh"
    # Скрипт нужно запустить из мейка или из еще одного контейнера с курлом, других вариантов нет.
    # --------------  This script needs to be run in a makefile!!! ---------------- !!!!
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elknet

  kibana:
    container_name: kibana
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=/usr/share/kibana/config/certs/ca/ca.crt
      - SERVER_SSL_ENABLED="true"
      - SERVER_SSL_KEY=/usr/share/kibana/config/certs/kibana/kibana.key
      - SERVER_SSL_CERTIFICATE=/usr/share/kibana/config/certs/kibana/kibana.crt

    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elknet

  logstash:
      container_name: logstash
      build:
          context: ./requirements/logstash
          dockerfile: Dockerfile
      volumes:
          - certs:/usr/share/logstash/config/certs
      depends_on:
        es01:
          condition: service_healthy
      environment:
          - ELASTIC_USERNAME=elastic
          - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      ports:
        - '5044:5044'
        - '6000:6000'
        - '12201:12201/udp'
      networks:
        - elknet
      # restart: always   

  # nginx:
  #   container_name: nginx
  #   image: nginx:latest
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     logstash:
  #       condition: service_started
  #     es01:
  #       condition: service_healthy
  #   ports:
  #     - "8080:80"
  #   restart: always
  #   logging:
  #     driver: "gelf"
  #     options:
  #       # gelf-address: "udp://logstash:12201"
  #       gelf-address: "udp://host.docker.internal:12201"
  #       tag: "nginx"
  #   networks:
  #     - elknet

# ---------------------- VOLUMES ---------------------- #

volumes:
  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/vatche/Documents/dbforft

  # backend-volume:
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /home/defaultuser/Documents/42Curcus/ft_transcendence/docker/requirements/backend/srcs/backend/backend/
    
  
  # backendmicro-volume:
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /home/defaultuser/Documents/42Curcus/ft_transcendence/docker/requirements/backendmicro/srcs/backendmicro/backendmicro

  # frontend-volume:
  #   driver_opts:
  #     o: bind
  #     type: none
  #     device: /home/defaultuser/Documents/42Curcus/ft_transcendence/docker/requirements/frontend/srcs/frontend/html

  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local


networks:
  nwtranscendence:
    driver: bridge
  elknet:
    driver: bridge